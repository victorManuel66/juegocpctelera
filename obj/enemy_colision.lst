ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .area _CODE
                              2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              3 .include "datos.h.s"
                     0013     1 tamagno_enemy = 0x13                               ;; Tamaño del array de entidades
   0000 03                    2 num_enemigos: .db 0x03                             ;; Número de enemigos
                              3 
                              4 ;; Constantes del array del enemigo
                     0000     5 .equ enemiX,      0
                     0001     6 .equ enemiY,      1
                     0002     7 .equ enemiAlto,   2
                     0003     8 .equ enemiAncho,  3
                     0004     9 .equ SpriteBajo,  4
                     0005    10 .equ SpriteAlto,  5
                     0006    11 .equ enemiVelo,   6
                     0007    12 .equ temporiza,   7
                     0008    13 .equ StatusAni,   8
                     0009    14 .equ frame1Bajo,  9
                     000A    15 .equ frame1Alto, 10
                     000B    16 .equ frame2Bajo, 11
                     000C    17 .equ frame2Alto, 12
                     000D    18 .equ frame3Bajo, 13
                     000E    19 .equ frame3Alto, 14
                     000F    20 .equ frame4Bajo, 15
                     0010    21 .equ frame4Alto, 16
                     0011    22 .equ frame5Bajo, 17
                     0012    23 .equ frame5Alto, 18
                             24 
                             25 ;; Constantes del Player
                     0000    26 .equ PlayX,      0
                     0001    27 .equ PlayY,      1
                     0002    28 .equ PlayAlto,   2
                     0003    29 .equ PlayAncho,  3
                     0004    30 .equ SprPlayLo,  4
                     0005    31 .equ SprPlayHi,  5
                     0006    32 .equ PlayVidas,  6
                             33 
                             34 
                             35 
                             36 
                             37 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              4 .include "Player.h.s"
                              1 .globl draw_player
                              2 .globl update_player
                              3 .globl erase_player
                              4 .globl disparando
                              5 .globl posXplayerPtr
                              6 .globl posYenemyPtr
                              7 .globl Player
                              8 .globl TeclaIz
                              9 .globl TeclaDe
                             10 .globl TeclaDi
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              5 .include "cpctelera.h.s"
                              1 .globl cpct_disableFirmware_asm
                              2 .globl cpct_setVideoMode_asm
                              3 .globl cpct_setPalette_asm
                              4 .globl cpct_drawSprite_asm
                              5 .globl cpct_getScreenPtr_asm
                              6 .globl cpct_scanKeyboard_asm
                              7 .globl cpct_isKeyPressed_asm
                              8 .globl cpct_waitVSYNC_asm
                              9 .globl cpct_drawSolidBox_asm
                             10 .globl cpct_etm_setTileset2x4_asm
                             11 .globl cpct_etm_drawTileBox2x4_asm
                             12 .globl cpct_getRandom_xsp40_u8_asm
                             13 .globl cpct_akp_SFXInit_asm
                             14 .globl cpct_akp_musicInit_asm
                             15 .globl cpct_akp_musicPlay_asm
                             16 .globl cpct_akp_SFXPlay_asm
                             17 .globl cpct_akp_SFXStop_asm
                             18 .globl cpct_akp_stop_asm
                             19 .globl cpct_drawStringM0_asm
                             20 .globl cpct_setDrawCharM0_asm
                             21 .globl cpct_isAnyKeyPressed_asm
                             22 .globl cpct_drawCharM0_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              6 .include "destroyEnemy.h.s"
                              1 .globl destruyeEnemigo
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                              7 .include "destruyePlayer.h.s"
                              1 .globl destruyePlayer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                              8 .include "enemy.h.s"
                              1 .globl draw_enemy
                              2 .globl calXenemy
                              3 .globl erase_enemy
                              4 .globl update_enemy
                              5 .globl posXenemyPtr
                              6 .globl posYenemyPtr
                              7 .globl enemy
                              8 .globl enemy2
                              9 .globl enemy3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                              9 
                             10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             11 ;; ESTA RUTINA SÓLO COMPRUEBA SI EL ENEMIGO CHOCA CONTRA EL PLAYER ;;
                             12 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             13 
   0001                      14 colision_enemy::
   0001 FD 21 00 00   [14]   15     ld iy, #num_enemigos
   0005 FD 5E 00      [19]   16     ld  e, 0(iy)                         
   0008                      17 sigui_enemy:
   0008 D5            [11]   18     push de                                        ;; Preservo E 
   0009 CD 17 00      [17]   19     call colision                                  ;; Borrar una entidad enemigo enemigo
   000C D1            [10]   20     pop  de                                        ;; Recupero número de entidades enemigas
   000D 1D            [ 4]   21     dec e                                          ;; Resta uno al total de entidades enemigas
   000E C8            [11]   22     ret z                                          ;; Si no quedan enemigos vuelve
   000F 01 13 00      [10]   23     ld bc, #tamagno_enemy                          ;; El tamaño de los datos de un enemigo
   0012 DD 09         [15]   24     add ix,bc                                      ;; Se suma a Ix oara deslazar el puntero
   0014 18 F2         [12]   25     jr sigui_enemy                                 ;; Siguiente enemigo a borrar
   0016 C9            [10]   26     ret
                             27 
   0017                      28 colision:
   0017 DD 7E 08      [19]   29     ld  a, StatusAni(ix)                           ;; Comprobar el estado de la animación 
   001A FE 00         [ 7]   30     cp #0x00                                       ;; Si no es cero es que esta explotando 
   001C C0            [11]   31     ret nz                                         ;; Por lo tanto vuelve por que no hay que comprobar colosiones
   001D DD 46 00      [19]   32     ld  b, enemiX(ix)                              ;; Posición X del enemigo
   0020 DD 7E 03      [19]   33     ld  a, enemiAncho(ix)                          ;; Ancho del enemigo
   0023 80            [ 4]   34     add a, b                                       ;; Se suman
   0024 47            [ 4]   35     ld  b, a                                       ;; En resultado se guarda en B
   0025 CD 00 00      [17]   36     call posXplayerPtr                             ;; Obtenemos la posición X del player
   0028 7E            [ 7]   37     ld  a, (hl)                                    ;; Guardar la coordena X en A
   0029 B8            [ 4]   38     cp  b                                          ;; Las comparamos
   002A 28 03         [12]   39     jr  z, verSiMenor                              ;; Si es igual 
   002C 38 01         [12]   40     jr  c, verSiMenor                              ;; o mayor
   002E C9            [10]   41     ret                                            ;; Si no lo son, no puede haber colisión
   002F                      42 verSiMenor:
   002F DD 46 00      [19]   43     ld  b, 0(ix)                                   ;; Posición X del enemigo
   0032 C6 05         [ 7]   44     add a, #0x05                                   ;; Ancho del player (mejorable)
   0034 B8            [ 4]   45     cp  b                                          ;; Comparar
   0035 28 03         [12]   46     jr  z, verSiColY                               ;; Si es igual
   0037 30 01         [12]   47     jr  nc, verSiColY                              ;; o menor
   0039 C9            [10]   48     ret                                            ;; Si llega aquí no puede haber colisión
                             49 
   003A                      50 verSiColY:
   003A DD 46 01      [19]   51     ld  b, enemiY(ix)                              ;; La coordenada Y del sprite del enemigo en B
   003D DD 7E 02      [19]   52     ld  a, enemiAlto(ix)                           ;; La altura del sprite del enemigo en A
   0040 80            [ 4]   53     add a, b                                       ;; Se suma a la coordenada X del enemigo, resultado en A
   0041 47            [ 4]   54     ld  b, a                                       ;; Lo guardo en B
   0042 3E C1         [ 7]   55     ld  a, #0xC1                                   ;; C1 es la posición Y del player, que nunca cambia durante el juego (mejor usar constantes)
   0044 B8            [ 4]   56     cp  b                                          ;; Se comparan, y si son iguales
   0045 28 03         [12]   57     jr  z, choque                                  ;; Colisionaron
   0047 38 01         [12]   58     jr  c, choque                                  ;; Si A es menor que B tambien hay colisión
   0049 C9            [10]   59     ret
   004A                      60 choque:                                            ;; Si llego hasta aquí es que hubo colisión
   004A CD 00 00      [17]   61     call destruyeEnemigo
   004D CD 00 00      [17]   62     call destruyePlayer
                             63 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                             64  
                             65   
   0050 C9            [10]   66     ret
